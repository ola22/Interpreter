//=^.^= Lists   08 
def l = [1, 2, 3, 4];
l;  //=^.^= [1,2,3,4]


//=^.^= Function empty
empty;   //=^.^= []


//=^.^= Function isEmpty
isEmpty empty;   //=^.^= True
isEmpty [];    //=^.^= True
isEmpty [1, 2];   //=^.^= False
isEmpty l;   //=^.^= False (on variable)


//=^.^= Function head
head [3, 1, 2];   //=^.^= 3
head [1 + 3 * 4, 1, 2];  //=^.^=  13
head l;   //=^.^= 1 (on variable)


//=^.^= Function tail
tail [3, 1, 2];   //=^.^= [1,2]
tail [2, 1 + 3 * 4, 1, 2];  //=^.^=  [13,1,2]
tail l;   //=^.^= [2,3,4] (on variable)


//=^.^= Function concat
concat [1, 2] [4, 5, 6];   //=^.^= [1,2,4,5,6]
concat l [1, 2];   //=^.^= [1,2,3,4,1,2]
def l2 = [4];
concat l l2;    //=^.^= [1,2,3,4,4] (on variable)
concat [] [1];   //=^.^=  [1]
concat [2 - 4] [];   //=^.^=  [-2]



//=^.^= Combination of those functions
head (concat [] [true, false]);   //=^.^=  True

isEmpty (concat [] [1, 2]);   //=^.^=  False

head (tail (tail (tail l)));  //=^.^=  4

head (tail concat empty [1, 2]);   //=^.^=  2

