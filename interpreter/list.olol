[1, 2, 3, 4];
[true, false, true];
//=^.^=[1, true];

[[]];
[[], []];
//=^.^=[[], 1];
[[], [1, 2, 4]];

[ [[[]]], [[[(\x -> x)], []]] ];
def c = 34;

if false then [[], [1]] else [[if true then 4 else 8], [1, c]];

 
empty;
//=^.^=empty == 2;

head [1, 2, 3, 4];
//=^.^=head [1, 2, 3, [4]];

head [[1, 2], [3, 4]];
def pom = [[1, 2], [3, 4]];
if true then [1, 2] else (head [[1, 2, 3]]); 
if true then [1, 2] else (head pom); 

tail pom;
//=^.^=if false then [1, 2] else (tail [[[1]], [[1, 2, 3]]]);                       //=^.^=    to do dupy :<
//=^.^=if true then 1 else tail [1, 2];

//=^.^=2 == (tail [[[1]], [[1, 2, 3]]]);

//=^.^= if true then [1, 2] else tail [1, 2, 3,4 ];                           //=^.^= teraz to do dupy!!!

//=^.^=[[], [1]] == 4;

if true then 3 else head [1, 2];

/=^.^=                                                to tez do dupy :(
if (head [true, false]) 
   then empty
   else [1, 2];
=^.^=/ 


fun ret_concat l1 = tail l1;
ret_concat : [if true then 5 + 6 else 7, 3]; //=^.^= [1,[2,3],4,5,11,3]


//=^.^= if ((head [\x -> x, \y -> y]) : true) then 4 else 5;  //=^.^=  4                tu widać że to porównywanie średnio działa :()
//=^.^=def lii = [\x -> x, \y -> y];
//=^.^=head lii : 2;
//=^.^=head tail lii : 2;

/=^.^=
if true then 1 else head [4, 5];
//=^.^=2 == [1, 2, 3, 4];


def l = [1,2,3];
tail l;

//=^.^=  if true then [1, true] else [true, 2];      OKI <3


if false then [1, 2] else [3, if false then 5 else 6];    //=^.^= OKI

def koko = 3;                                        //=^.^= OKI
if false then [1, 2] else [3, koko, 4];
empty;
//=^.^=22 == empty;

//=^.^=1 + [true, 1, 2];

//=^.^=if true then [[1, 2], [true]] else [[3, 5, 6, 8], [true]];

//=^.^= if true then [1, true] else [5, false];      //=^.^=  OKI <3





if true then [] else [true, false];     //=^.^= 9    JAK CUDNIE, POPORSTU IDEALNIE




if true then 1 else empty;    //=^.^= SMUTECZEK
if true then [2] else [1, false, true];

//=^.^= SMUTECZEKif true then empty else [true, false]; //=^.^= SMUTECZEK
[1, 2, 5, true];                  //=^.^= SMUTECZEK

//=^.^=if true then [1, 2, true] else concat [4, 5] [false];
[1, 2, 5, true];                  //=^.^= SMUTECZEK

/=^.^=
isEmpty [];
isEmpty [1, 2, 3];
isEmpty [[]];
isEmpty [[1, 2], 4, 5];
//=^.^= isEmpty 1;

//=^.^=head [];
head [1, 2, 3];
//=^.^=head 1;


concat [1, 2] [3, 4];
concat [1, 2] [true, false];
//=^.^=concat 2 [1, 2];

concat [\x -> x] [1, 2];
if true then 1 else head [4, 5];
if true then 1 else head [5, true];   //=^.^= jest supcio <3

if true then 1 else head [1, 2, 3];



tail [1, 2, [1, 3]];
//=^.^=tail true;                           tail do dupy :(
if false then [1, 2] else tail [1, 2, 3];
if false then [1, 2] else tail [true, false, true]; 
//=^.^=tail true;

/=^.^=/


//=^.^=if true then [1, 2, true] else concat [4, 5] [false]; 
//=^.^=if true then [1, 2, true] else concat [4, true] [false];